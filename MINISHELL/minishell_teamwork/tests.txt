GO TO LINE 455



1. HEREDOC Tests
cat <<HEREDOC
oi
HEREDOC

cat <<HERE <<DOC
oi
HERE
time
DOC

cat <<HERE | ls
oi
HERE

cat <<HERE
$USER
oi
HERE

cat <minishell.h <<HERE <missing | ls
HERE

cat <minishell.h <<HERE | cat
HERE

cat <minishell.h <<HERE <missing <<DOC | echo oi
HERE
DOC

cat << $
oi
$

<< echo oi
echo

2. Mandatory Functionality Tests
echo -n hello

export HELLO=123
export HELLO="beautiful world"

cd obj
echo $PWD $OLDPWD

doesntexist
echo $?

doesntexist
$EMPTY
echo $?

echo "hi" | cat | cat | cat | cat | cat | cat | cat
ps -a

echo - "" " " hello

unset USER
unset PATH
unset PWD
/bin/ls

cd .. hi

cd

3. Built-in Commands
echo
echo hello world

echo "hello world"

echo 'hello world'

echo hello'world'

echo hello""world

echo ''

echo "$PWD"

echo '$PWD'

echo "aspas ->'"

echo "aspas -> ' "

echo 'aspas ->"'

echo 'aspas -> " '

echo "> >> < * ? [ ] | ; [ ] || && ( ) & # $ \ <<"

echo '> >> < * ? [ ] | ; [ ] || && ( ) & # $ \ <<'

echo "exit_code ->$? user ->$USER home -> $HOME"

echo 'exit_code ->$? user ->$USER home -> $HOME'

echo "$"

echo '$'

echo $

echo $?

echo $?HELLO

pwd
pwd

pwd oi

export
export hello

export HELLO=123

export A-

export HELLO=123 A

export HELLO="123 A-"

export hello world

export HELLO-=123

export =

export 123

unset
unset

unset HELLO

unset HELLO1 HELLO2

unset HOME

unset PATH

unset SHELL

cd
cd $PWD

cd $PWD hi

cd 123123

exit
exit 123

exit 298

exit +100

exit "+100"

exit +"100"

exit -100

exit "-100"

exit -"100"

exit hello

exit 42 world

4. OS Specific Tests
unset HELLO=

unset A-

export HELLO=123 A- WORLD=456

unset HELLO A- WORLD

export UNO=1 DOS-2 TRES=3 || env | grep TRES

export | sort | grep -v SHLVL | grep -v "declare -x _" | grep -v "PS.="

exit 9223372036854775807

exit 9223372036854775808

exit -9223372036854775807

exit -9223372036854775808

exit -9223372036854775809

5. Pipe Tests
env | sort | grep -v SHLVL | grep -v ^_

cat ./test_files/infile_big | grep oi

cat minishell.h | grep ");"$

export GHOST=123 | env | grep GHOST

6. Redirection Tests
grep hi <./test_files/infile

grep hi "<infile" < ./test_files/infile

echo hi < ./test_files/infile bye bye

grep hi <./test_files/infile_big <./test_files/infile

echo <"./test_files/infile" "bonjour 42"

cat <"./test_files/file name with spaces"

cat <./test_files/infile_big ./test_files/infile

cat <"1""2""3""4""5"

echo <"./test_files/infile" <missing <"./test_files/infile"

echo <missing <"./test_files/infile" <missing

cat <"./test_files/infile"

echo <"./test_files/infile_big" | cat <"./test_files/infile"

echo <"./test_files/infile_big" | cat "./test_files/infile"

echo <"./test_files/infile_big" | echo <"./test_files/infile"

echo hi | cat <"./test_files/infile"




1. Simple Commands & Global Variables
/bin/ls

/bin/echo Hello

`` (empty command)

(spaces only)

(tab only)

2. Absolute Path Commands with Arguments
/bin/ls -l

/usr/bin/cal 2023

/bin/echo Hello World

/bin/cat /etc/passwd

3. echo Command Variations
echo

echo -n

echo -n -n -n Hello

echo Hello World (multiple spaces)

echo -n -n Hello -n World

4. exit Command Variations
exit

exit 0

exit 255

exit 256 (should wrap to 0)

exit -1 (should become 255)

5. Return Value Testing
/bin/ls /nonexistent; echo $?

echo Hello; echo $?

exit 42; echo $? (in subshell)

expr $? + $? after failed command

echo $?$? after successful command

6. Signal Handling Tests
cat then Ctrl+C

grep "something" then Ctrl+\

cat | cat then Ctrl+D

echo "partial then Ctrl+C (should clean buffer)

sleep 5 then Ctrl+C

7. Double Quote Expansion
echo "cat lol.c | cat > lol.c"

echo "Hello World"

echo "$USER $HOME"

echo "Current $$: $?"

echo "Unclosed (should error)

8. Single Quote Behavior
echo '$USER'

echo 'Hello World'

echo '$(ls)'

echo 'Unclosed (should error)

echo '"Double" inside single'

9. env Command
env

env | grep PATH

env TEST=value env

env -i env (should be empty)

env VAR=value echo $VAR

10. export/unset
export TEST=123; env | grep TEST

export TEST="with spaces"; echo $TEST

export TEST=1 TEST=2; echo $TEST

unset USER; echo $USER

unset PATH; ls (should fail)

11. cd/pwd
cd .; pwd

cd ..; pwd

cd /nonexistent (should error)

cd $HOME; pwd

cd -- (should go to home)

12. Relative Path Execution
../bin/ls (from parent directory)

./minishell

bin/../bin/ls

ls ../..

../../../bin/ls

13. PATH Testing
ls (with PATH set)

unset PATH; ls (should fail)

export PATH="/bin:/usr/bin"; ls

export PATH="/wrong:/bin"; ls

export PATH=":/bin"; ls

14. Redirection Combinations
cat < file1 > file2

echo hello >> file

cat < file1 >> file2

grep pattern < input > output

cat <<EOF > file

15. Pipe Combinations
ls | grep .c

cat file | sort | uniq

ls | wc -l

echo hello | cat | cat

ls /nonexistent | grep error

16. Error Cases
| (empty pipe)

> (empty redirection)

echo "unclosed

cat < nonexistent

ls | > file

17. Environment Variable Edge Cases
echo "$"

echo "$NONEXISTENT"

echo "${USER}"

echo "$USER$HOME"

echo "$$$USER"

18. Bonus Logical Operators
true && echo success

false || echo fallback

(echo a && echo b) || echo c

false && echo a || echo b

(exit 1) && echo a || echo b



















/////eval?
1. Simple Commands & Global Variables
/bin/ls (absolute path)

`` (empty command)

(spaces only)

(tab only)

2. Commands with Arguments
/bin/ls -l

/bin/echo Hello World

/usr/bin/whoami

/bin/cat /etc/passwd

3. echo Command Tests
echo (no args)

echo hello

echo -n hello

echo hello world (multiple spaces)

echo -n -n hello

4. exit Command Tests
exit

exit 0

exit 42

exit 256 (should wrap to 0)

exit -1 (should become 255)

5. Exit Status Tests
/bin/ls /nonexistent; echo $?

echo hello; echo $?

(exit 42); echo $?

false; echo $?

true; echo $?

6. Signal Handling (Manual Tests)
Ctrl+C in empty prompt

Ctrl+\ in empty prompt

Ctrl+D in empty prompt

Ctrl+C after partial command

Ctrl+D after partial command

7. Double Quote Tests
echo "hello world"

echo "cat file | cat > file"

echo "$USER"

echo "Current $$"

echo "Unclosed (should error)

8. Single Quote Tests
echo '$USER'

echo 'hello world'

echo '$(ls)'

echo 'Unclosed (should error)

echo '"Double"'

9. env Command Tests
env

env | grep PATH

env VAR=value env

env -i env (empty env)

env VAR=value echo $VAR

10. export/unset Tests
export TEST=123; echo $TEST

export TEST="with spaces"; echo "$TEST"

unset TEST; echo $TEST

unset PATH; ls (should fail)

export A=1 B=2; echo $A $B

11. cd/pwd Tests
cd /tmp; pwd

cd ..; pwd

cd /nonexistent (should error)

cd; pwd (home dir)

cd .; pwd

12. Relative Path Tests
../bin/ls (from parent dir)

./minishell

bin/../bin/ls

ls ../..

../../../bin/ls

13. PATH Handling Tests
ls (with PATH set)

unset PATH; ls (should fail)

export PATH="/bin:/usr/bin"; ls

export PATH="/wrong:/bin"; ls

export PATH=""; ls (should fail)

14. Redirection Tests
cat < file

echo hello > file

echo world >> file

cat < file1 > file2

cat <<EOF > file

15. Pipe Tests
ls | grep .c

cat file | sort | uniq

ls | wc -l

ls /nonexistent | grep error

echo hello | cat | cat

16. Error Cases
| (empty pipe)

> (empty redirection)

echo "unclosed

cat < nonexistent

ls | > file

17. Environment Variable Edge Cases
echo "$"

echo "$NONEXISTENT"

echo "${USER}"

echo "$USER$HOME"

echo "$$$USER"


valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./minishell

# echo
echo "Hello World"
echo -n "No newline"
echo $USER

# cd
cd /tmp
cd ~
cd -
cd (no args - should go to HOME)
cd nonexistent_dir  # Should fail gracefully

# pwd
pwd

# env
env

# export
export NEW_VAR="test"
export INVALID_VAR=1invalid
export

# unset
unset NEW_VAR
unset INVALID_VAR
unset PATH  # Critical variable

# exit
exit
exit 42
exit invalid_arg  # Should handle error


////redirections# Input redirection
cat < Makefile

# Output redirection
ls > out.txt
cat out.txt

# Append
echo "line1" >> out.txt
echo "line2" >> out.txt
cat out.txt

# Heredoc
cat << EOF
heredoc> line1
heredoc> line2
heredoc> EOF

# Combined
cat < Makefile > out.txt
grep "int" < main.c > filtered.txt


/////pipes
ls | grep "main"
cat Makefile | grep "CC" | wc -l
ls | cat -e | sort


////env variable expansion
echo $USER
echo "$USER"
echo '$USER'  # Should not expand
echo "Current path: $PWD"
echo "Exit status: $?"
echo "Invalid var: $NONEXISTENT_VAR"

///edge cases:
# Empty input
(just press Enter)

# Unclosed quotes
echo "Hello
echo 'World

# Invalid commands
nonexistent_command
./nonexistent_script.sh

# Syntax errors
ls >
ls <
| ls
ls | | grep
cat << EOF  # No delimiter given

# Signals (Ctrl+C, Ctrl+D)
(Run and press Ctrl+C, Ctrl+D)


////memory leaks in special cases:
# Command with spaces
echo    "   hello   "   |   cat   -e

# Multiple redirections
cat < Makefile > out.txt < another_file

# Empty commands
""  
''  
""

# Mixed quotes and expansions
echo "'$USER'"  
echo '"$USER"'

# Long command chains
ls | grep "a" | sort | uniq | wc -l