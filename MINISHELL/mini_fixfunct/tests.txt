# Prints without a new  
echo -n hello                 OK

# update env variable value
export HELLO=123                    OK
export HELLO="beautiful world"      Ok

# keep track of OLDPWD
cd obj                              ok
echo $PWD $OLDPWD                   ok

# invalid command, followed by empty input, should keep the exit code
doesntexist                                                             ok

echo $?                                                              ok

#invalid command, followed by empty variable, should clear the exit code
doesntexist
$EMPTY
echo $?                                                                ok

# Check if there isn't a zombie process called `cat`
echo "hi" | cat | cat | cat | cat | cat | cat | cat
ps -a

# Should skip the empty argument, and print hello after spaces
echo - "" "  " hello

# Neither of these unsets should break the shell, and you should still be able to call `/bin/ls`
unset USER
unset PATH
unset PWD
/bin/ls

# This should not change the current directory
cd .. hi

# Empty `cd` moves to home
cd


cat <<HEREDOC
oi
HEREDOC

cat <<HERE <<DOC
oi
HERE
time
DOC

cat <<HERE | ls
oi
HERE

cat <<HERE
$USER
oi
HERE

cat <minishell.h <<HERE <missing | ls
HERE

cat <minishell.h <<HERE | cat
HERE

cat <minishell.h <<HERE <missing <<DOC | echo oi
HERE
DOC

cat << $
oi
$

<< echo oi
echo


CTRL+C
CTRL+D
CTRL+\
CTRL+C, CTRL+C, CTRL+C, exit
CTRL+C, CTRL+C, CTRL+C, Ctrl+D

cat | ls # testar dando depois:
#- Enter
#- Ctrl+D
#- Ctrl+\
#- Ctrl+C

grep oi | ls # testar dando depois:
#- Enter + Ctrl+D
#- Ctrl+D
#- "oi" + Enter + Ctrl+D
#- Ctrl+\
#- Ctrl+C
#- "oi" + Enter + Ctrl+\

./test_files/loop.out # finalizar com:
#- Ctrl+C
#- Ctrl+\  -> workspaces: ^\Quit\n
#- Ctrl+D  -> n√£o faz nada

./test_files/loop.out | ls
# finalizar com:
#- Ctrl+C
#- Ctrl+\
#- Ctrl+D

ls | ./test_files/loop.out
# finalizar com:
#- Ctrl+C
#- Ctrl+\
#- Ctrl+D

hello + Ctrl+C
# Check that the new line is empty